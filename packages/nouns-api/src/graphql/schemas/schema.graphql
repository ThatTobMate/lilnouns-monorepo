type Query {
  getIdeas(options: IdeaInputOptions!): [Idea!]
  getAllUsers: [User!]
  getUser(options: UserInputOptions!): User
  getPropLotList(options: PropLotInputOptions!): PropLotListResponse!
  getPropLot(options: PropLotInputOptions!): PropLotResponse!
}

# Query input types

input UserInputOptions {
  wallet: String!
}

input IdeaInputOptions {
  sort: SORT_TYPE
}

input PropLotInputOptions {
  filters: [FilterInput!]
  requestUUID: String!
}

input FilterInput {
  key: String!
  value: String!
}

# Query response types

type PropLotResponse {
  sections: [UIPropLotSections!]
  metadata: PropLotResponseMetadata!
}

union UIPropLotSections = UIPropLotFilterBar | UIPropLotComponentList

type UIPropLotFilterBar {
  sortPills: UISortPillGroup
  filterPills: UIFilterPillGroup
  filterDropdown: UIDropdownFilter
}

type UIPropLotComponentList {
  list: [UIListItem!]
}

type PropLotListResponse {
  list: [UIListItem!]
  uiFilters: UIFilterGroup
  metadata: PropLotResponseMetadata!
}

type UIFilterGroup {
  sortPills: UISortPillGroup
  filterPills: UIFilterPillGroup
  filterDropdown: UIDropdownFilter
}

type PropLotResponseMetadata {
  appliedFilters: [FilterParam!]
  requestUUID: String!
}

# Raw Data Types

type UserStats {
  totalVotes: Int
  totalComments: Int
  totalIdeas: Int
}

type User {
  wallet: String!
  userStats: UserStats
}

type Vote {
  id: Int!
  voterId: String!
  ideaId: Int!
  direction: Int!
  voter: User!
}

type Comment {
  id: Int!
  body: String!
  ideaId: Int!
  parentId: Int
  authorId: String!
  replies: [Comment!]
  createdAt: String!
}

type IdeaStats {
  comments: Int
}

type IdeaTags {
  label: String!
  type: TagType!
}

type Idea {
  id: Int!
  title: String!
  tldr: String!
  description: String!
  votes: [Vote!]
  creatorId: String!
  comments: [Comment!]
  votecount: Int!
  createdAt: String!
  ideaStats: IdeaStats
  tags: [IdeaTags!]
}

# Target Types - Uses to apply user actions e.g. apply a filter/sort option or archive a idea.

type FilterParam {
  key: String!
  value: String!
}

# Used to apply the param value to the getPropLotList query
type TargetFilterParam {
  param: FilterParam! # Example: {key: "tag", value: "archived" } or {key: "date", value: "LAST_WEEK" }
}

# Used to tell the client to handle a specific action on the UI e.g. archive an idea.
type TargetAction {
  displayName: String!
  action: TargetActionType!
}

union Target = TargetFilterParam | TargetAction

# UI types

type UISortPillGroup {
  id: String!
  label: String
  pills: [UIFilterPills!]!
}

type UIFilterPillGroup {
  id: String!
  label: String
  pills: [UIFilterPills!]!
  type: UIFilterType!
}

type UIDropdownFilter {
  id: String!
  label: String
  options: [UIFilterOption!]!
  type: UIFilterType!
}

type UIFilterOption {
  id: String!
  selected: Boolean!
  label: String
  target: TargetFilterParam!
}

enum UIFilterType {
  SINGLE_SELECT
  MULTI_SELECT
}

type UITogglePill {
  id: String!
  label: String
  options: [UIFilterOption!]!
}

type UIDropdownPill {
  id: String!
  selected: Boolean!
  label: String
  options: [UIFilterOption!]!
}

union UIFilterPills = UITogglePill | UIDropdownPill

# Wrapper aroung the raw idea data, allows us to add an action menu
type UIIdeaRow {
  data: Idea!
  actionMenu: [TargetAction!]
}

# Can be extended to show different UI types in the list - ideas, comments or votes
union UIListItem = UIIdeaRow

# Enums

enum SORT_TYPE {
  VOTES_DESC
  VOTES_ASC
  LATEST
  OLDEST
}

enum TargetActionType {
  ARCHIVE_IDEA
}

enum TagType {
  NEW
  INFO
  QUORUM
  ARCHIVED
  DISCUSSION
}
